#ifndef TURBO_SANTA_COMMON_BACK_END_MEMORY_INTERNAL_ROM_H_
#define TURBO_SANTA_COMMON_BACK_END_MEMORY_INTERNAL_ROM_H_

#include <memory>
#include <vector>

#include "backend/memory/flags.h"
#include "backend/memory/memory_segment.h"
#include "submodules/glog/src/glog/logging.h"

namespace back_end {
namespace memory {

static const std::vector<unsigned char> kBootROM = {
  0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e, // 0x000
  0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3, 0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0, // 0x010
  0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b, // 0x020
  0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20, 0xf9, // 0x030
  0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99, 0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, // 0x040
  0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04, // 0x050
  0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20, 0xf7, 0x1d, 0x20, 0xf2, // 0x060
  0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06, // 0x070
  0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20, // 0x080
  0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17, // 0x090
  0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b, // 0x0a0
  0x03, 0x73, 0x00, 0x83, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e, // 0x0b0
  0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc, // 0x0c0
  0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, // 0x0d0
  0x21, 0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20, // 0x0e0
  0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe, 0x3e, 0x01, 0xe0, 0x50, // 0x0f0
  0x0a                                                                                            // 0x100
};

class InternalROM : public ContiguousMemorySegment {
 public:
  virtual unsigned char Read(unsigned short address) { return kBootROM[address - lower_address_bound()]; }

  virtual void Write(unsigned short, unsigned char) {}

  static const int kInternalROMSize = 256;

 protected:
  unsigned short lower_address_bound() { return 0; }
  unsigned short upper_address_bound() { return kInternalROMSize - 1; }

};

class InternalROMFlag : public Flag {
 public:
  InternalROMFlag() : Flag(0xff50) {}

  virtual void Write(unsigned short address, unsigned char value) {
    if (!is_set()) {
      Flag::Write(address, value);
      if (is_set()) {
        LOG(INFO) << "Internal ROM disabled";
      }
    }
  }

  bool is_set() { return flag() != 0; }
  void set() { set_flag(0x01); }
};

} // namespace memory
} // namespace back_end

#endif // TURBO_SANTA_COMMON_BACK_END_MEMORY_INTERNAL_ROM_H_
